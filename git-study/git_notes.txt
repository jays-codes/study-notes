------------------------------------------
june

bp: use ssh when cloning from gh

------------------------------------------
9 may 20
@@@@ BP : interactive rebase
	-> git rebase -i
	- only do this for commits that aren't shared yet
	- modifies history of commits
	- use notepad instead of subl

	-> git rebase --abort
	-> git rebase -q
		- this is to cancel in the middle of a rebase
		- if cancelling results with HEAD not pointing to a branch, just checkout the branch
	-> git push -f
		- this is to force the rebase to the remote repo
	BP : for a workflow, you should commit to your local early and often, when ready to finally push the work to a shared repo, you should do an interactive rebase to clean your history

@@@@ BP : reflog
	-> git reflog HEAD : audit histiry and recover from mistake
	- list the changes (with their hashes) to the commits pointed to by HEAD, even ones that have been dropped but not garbage collected
	- you can do a git show on a hash from the list

-> git revert <commit>
-revert changes introduced in this commit and records to revert in a new commit. it doesn't mean undo. git reset is more like undo.

- modify the current commit with changes that are currently staged, use commit --amend

@@@@ Settingup git workflow
	-> Distribution Model, Branching Model, Constraints
	Distribution Model: Peer2Peer, Centralized, Pull-Request, Dictator/Lieutenant

	Branching Model
	-> Integration Branch: often called main branch, master, place where things come together and where you solve conflicts. Is often stable. Automated-build systems checks whatever is on this branch.
	-> Release Branch: BP often tags point to points in this branch to mark version releases, or sometimes they have a release branch instead of a tag
	-> Feature/Topic Branch: branch out from integration where specific feature are worked on separately and later merged back into the integration branch
	-> hotfix branch: branch out of a release branch. used to have the same commit to two separate branches. e.g a fix commit is done on this branch and merged the hotfix branch into both release and integration branch

	Constraints/Rules
	-> Don't push when the build is red: let the current developer correct the build first
	-> only developer X can do Y on branch Z
	-> rebase, dont merge/vice versa
	-> GIT Hooks: feature in GIT to run a script whenever an event happens. e.g a hook runs a script on a build server whenever a dev pushes something

	gitflow example:
	https://nvie.com/posts/a-successful-git-branching-model/ <- dont just use gitflow.

	- start with a simple workflow: centralized with one integration and feature branch.
	- grow it when needed

------------------------------------------
7 may 20


------------------------------------------
3 may 20
- currently at MG, chap 6, part 4: browsing the log

------------------------------------------
26 apr 20
@@@@ BP : copying a remote repo to local 
	-> git clone <repo>

	- this will also copy the root folder from origin so you don't have to recreate the root folder in local. 


@@@@ BP : user error when doing git push
	-> create a personal accesskey in GH and use that key when prompted for the password

------------------------------------------

Setting up eclipse in GIT

eclipse, GIT, java SOP

+ When creating a new java project
	1. create project
	2. share project as git
	
+ A project is committed to a shared gh repo of and with other related projects. 1 gh repo, 1 or more projects

+ if a project is stand alone, it should have a gh repo of its own. 1 project = 1 gh repo
	
------------------------------------------
Remote, Local repo mappings

git@github.com:jays-codes/test-workspaces.git 
<->

C:\jay\training\test-workspaces
git@github.com:jays-codes/study-notes.git
<->
C:\jay\training\study-notes